pipeline {
	agent any
	tools {
		nodejs 'NodeJS'
	}
	environment {
		DOCKER_HUB_CREDENTIALS_ID = 'justino-dockerhub'
		DOCKER_HUB_REPO = 'justinoboggio0714/node-minikube'
		APP_DIR = 'nodeApp-k8s'
	}
	stages {
		stage('Checkout Github'){
			steps {
				git branch: 'main', credentialsId: 'git-pat', url: 'https://github.com/JustinoBoggio/aws-practice.git'
			}
		}		
		stage('Install node dependencies'){
			steps {
				dir(env.APP_DIR) {
					sh 'npm install'
				}
			}
		}
		stage('Test Code'){
			steps {
				dir(env.APP_DIR) {
					sh 'npm test'
				}
			}
		}
		stage('Build Docker Image'){
			steps {
				dir(env.APP_DIR) {
					script {
						dockerImage = docker.build("${DOCKER_HUB_REPO}:latest")
					}
				}
			}
		}
		stage('Trivy Scan'){
			steps {
				dir(env.APP_DIR) {
					sh 'trivy image --severity HIGH,CRITICAL --no-progress --format table -o trivy-scan-report.txt ${DOCKER_HUB_REPO}:latest'
				}
			}
		}
		stage('Push Image to DockerHub'){
			steps {
				dir(env.APP_DIR) {
					script {
						docker.withRegistry('https://registry.hub.docker.com', "${DOCKER_HUB_CREDENTIALS_ID}"){
							dockerImage.push('latest')
						}
					}
				}
			}
		}
		// stage('Install Kubectl'){
		// 	steps {
		// 		sh '''
		// 		curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        //         		chmod +x kubectl
        //         		mv kubectl /usr/local/bin/kubectl
		// 		'''
		// 	}
		// }
		stage('Deploy to Kubernetes'){
			steps {
				dir(env.APP_DIR) {
					script {
						withCredentials([file(credentialsId: 'kubeconfig-minikube', variable: 'KUBECONFIG_FILE')]) {
							sh "export KUBECONFIG=${KUBECONFIG_FILE}"
							sh 'kubectl version --client'
							sh 'kubectl apply -f deployment.yaml'
							sh 'kubectl apply -f service.yaml'
						}
					}
				}
			}
		}
	}

	post {
		success {
			echo 'Build&Deploy completed succesfully!'
		}
		failure {
			echo 'Build&Deploy failed. Check logs.'
		}
	}
}